{
  "Struct": {
    "prefix": "struct",
    "body": [
      "#[derive(Debug, Clone)]",
      "pub struct ${1:StructName} {",
      "    ${2:field}: ${3:String},",
      "    $0",
      "}",
      "",
      "impl ${1:StructName} {",
      "    pub fn new(${2:field}: ${3:String}) -> Self {",
      "        Self {",
      "            ${2:field},",
      "        }",
      "    }",
      "}"
    ],
    "description": "Create a Rust struct with implementation"
  },
  "Function": {
    "prefix": "fn",
    "body": [
      "pub fn ${1:function_name}(${2:params}) -> ${3:Result<(), Box<dyn std::error::Error>>} {",
      "    $0",
      "    Ok(())",
      "}"
    ],
    "description": "Create a Rust function with Result return type"
  },
  "Async Function": {
    "prefix": "async",
    "body": [
      "pub async fn ${1:function_name}(${2:params}) -> Result<${3:()}, Box<dyn std::error::Error>> {",
      "    $0",
      "    Ok(())",
      "}"
    ],
    "description": "Create an async Rust function"
  },
  "Test": {
    "prefix": "test",
    "body": [
      "#[cfg(test)]",
      "mod tests {",
      "    use super::*;",
      "",
      "    #[test]",
      "    fn test_${1:test_name}() {",
      "        $0",
      "    }",
      "}"
    ],
    "description": "Create a Rust test module"
  },
  "Main": {
    "prefix": "main",
    "body": [
      "fn main() -> Result<(), Box<dyn std::error::Error>> {",
      "    $0",
      "    Ok(())",
      "}"
    ],
    "description": "Rust main function with error handling"
  },
  "Print Debug": {
    "prefix": "dbg",
    "body": [
      "println!(\"${1:DEBUG}: {:?}\", ${2:variable});"
    ],
    "description": "Print debug statement with debug formatting"
  },
  "Match": {
    "prefix": "match",
    "body": [
      "match ${1:expression} {",
      "    ${2:pattern} => {",
      "        $0",
      "    }",
      "    _ => {",
      "        // Handle default case",
      "    }",
      "}"
    ],
    "description": "Rust match expression"
  },
  "Result": {
    "prefix": "result",
    "body": [
      "let ${1:result} = match ${2:expression} {",
      "    Ok(value) => value,",
      "    Err(e) => {",
      "        eprintln!(\"Error: {}\", e);",
      "        return Err(e.into());",
      "    }",
      "};"
    ],
    "description": "Handle Result with error propagation"
  },
  "Option": {
    "prefix": "option",
    "body": [
      "let ${1:value} = ${2:option}.ok_or(\"${3:Error message}\")?;"
    ],
    "description": "Convert Option to Result with error message"
  },
  "Vec": {
    "prefix": "vec",
    "body": [
      "let mut ${1:vec} = Vec::new();",
      "$0"
    ],
    "description": "Create a new Vec"
  },
  "HashMap": {
    "prefix": "map",
    "body": [
      "use std::collections::HashMap;",
      "",
      "let mut ${1:map} = HashMap::new();",
      "$0"
    ],
    "description": "Create a new HashMap"
  }
}
