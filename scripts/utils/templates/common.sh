#!/usr/bin/env bash

# Standard script initialization
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
UTILS_DIR="$(cd "$SCRIPT_DIR" && find . .. ../.. -name "script-init.sh" -type f | head -1 | xargs dirname)"
source "$UTILS_DIR/script-init.sh"

# Common template utilities for DROO's dotfiles

# Source helpers for consistent logging
if [[ -f "$SCRIPT_DIR/../helpers.sh" ]]; then
    source "$SCRIPT_DIR/../helpers.sh"
fi

# Function to validate project name
validate_project_name() {
    local name="$1"

    # Check if name is empty
    if [[ -z "$name" ]]; then
        log_error "Project name cannot be empty"
        return 1
    fi

    # Check if name contains invalid characters
    if [[ ! "$name" =~ ^[a-zA-Z0-9_-]+$ ]]; then
        log_error "Project name can only contain letters, numbers, hyphens, and underscores"
        return 1
    fi

    # Check if name starts with a number
    if [[ "$name" =~ ^[0-9] ]]; then
        log_error "Project name cannot start with a number"
        return 1
    fi

    return 0
}

# Function to check if project directory exists
check_project_exists() {
    local name="$1"

    if [[ -d "$name" ]]; then
        log_error "Project directory '$name' already exists"
        return 1
    fi

    return 0
}

# Function to create basic project structure
create_basic_structure() {
    local name="$1"

    # Create project directory
    mkdir -p "$name"
    cd "$name" || return 1

    # Initialize git
    git init

    # Create basic directories
    mkdir -p src tests docs

    log_info "Created basic project structure for $name"
}

# Function to generate common .gitignore
generate_common_gitignore() {
    cat > .gitignore << EOF
# Dependencies
node_modules/
target/
dist/
build/

# Environment
.env
.env.local
.env.production

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Logs
*.log
npm-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory
coverage/
.nyc_output

# Temporary files
*.tmp
*.temp
*.cache

# Backup files
*.bak
*.backup
*.old
*.orig

# direnv
.envrc.allow

# devenv
.devenv/
devenv.nix
EOF
}

# Function to generate basic README
generate_basic_readme() {
    local name="$1"
    local description="${2:-Project generated by DROO\'s dotfiles}"

    cat > README.md << EOF
# $name

$description

## Setup

```bash
# Install dependencies
npm install

# Start development
npm run dev
```

## Development

```bash
# Run tests
npm test

# Build project
npm run build
```

## License

MIT
EOF
}

# Function to add direnv support to project
add_direnv_support() {
    local project_type="$1"

    if [[ -f .envrc ]]; then
        echo "  .envrc already exists, skipping direnv setup"
        return
    fi

    case "$project_type" in
        "node"|"js"|"ts"|"nextjs"|"react")
            cat > .envrc << EOF
export NODE_ENV=development
export PATH="\$PWD/node_modules/.bin:\$PATH"
export NPM_CONFIG_LOGLEVEL=warn
EOF
            ;;
        "python"|"py")
            cat > .envrc << EOF
export PYTHONPATH="\$PWD:\$PYTHONPATH"
export PIPENV_VENV_IN_PROJECT=1
export PYTHONUNBUFFERED=1
EOF
            ;;
        "rust")
            cat > .envrc << EOF
export RUST_BACKTRACE=1
export CARGO_INCREMENTAL=1
export RUST_LOG=info
EOF
            ;;
        "go")
            cat > .envrc << EOF
export GOPATH="\$PWD"
export PATH="\$PWD/bin:\$PATH"
export GO111MODULE=on
EOF
            ;;
        "web3")
            cat > .envrc << EOF
export FOUNDRY_PROFILE=default
export ANCHOR_PROVIDER_URL=http://127.0.0.1:8899
export ANCHOR_WALLET=~/.config/solana/id.json
EOF
            ;;
        *)
            cat > .envrc << EOF
# Auto-generated .envrc
export PROJECT_ROOT="\$PWD"
export PATH="\$PWD/bin:\$PATH"
EOF
            ;;
    esac

    direnv allow
    echo " Added direnv support for $project_type"
}

# Function to add devenv support to project
add_devenv_support() {
    local project_type="$1"

    if [[ -f devenv.nix ]]; then
        echo "  devenv.nix already exists, skipping devenv setup"
        return
    fi

    case "$project_type" in
        "node"|"js"|"ts"|"nextjs"|"react")
            cat > devenv.nix << EOF
{ pkgs, ... }:

{
  packages = [ pkgs.git pkgs.nodejs_20 pkgs.yarn ];

  enterShell = \"\"
    echo \"Node.js development environment loaded\"
    echo \"Available commands: node, npm, yarn\"
  \"\";

  scripts.dev = \"npm run dev\";
  scripts.build = \"npm run build\";
  scripts.test = \"npm test\";
}
EOF
            ;;
        "python"|"py")
            cat > devenv.nix << EOF
{ pkgs, ... }:

{
  packages = [ pkgs.git pkgs.python311 pkgs.poetry ];

  enterShell = \"\"
    echo \"Python development environment loaded\"
    echo \"Available commands: python, pip, poetry\"
  \"\";

  scripts.dev = \"python main.py\";
  scripts.test = \"python -m pytest\";
}
EOF
            ;;
        "rust")
            cat > devenv.nix << EOF
{ pkgs, ... }:

{
  packages = [ pkgs.git pkgs.rustc pkgs.cargo ];

  enterShell = \"\"
    echo \"Rust development environment loaded\"
    echo \"Available commands: rustc, cargo\"
  \"\";

  scripts.dev = \"cargo run\";
  scripts.build = \"cargo build\";
  scripts.test = \"cargo test\";
}
EOF
            ;;
        "go")
            cat > devenv.nix << EOF
{ pkgs, ... }:

{
  packages = [ pkgs.git pkgs.go ];

  enterShell = \"\"
    echo \"Go development environment loaded\"
    echo \"Available commands: go\"
  \"\";

  scripts.dev = \"go run main.go\";
  scripts.build = \"go build\";
  scripts.test = \"go test\";
}
EOF
            ;;
        "web3")
            cat > devenv.nix << EOF
{ pkgs, ... }:

{
  packages = [ pkgs.git pkgs.foundry ];

  enterShell = \"\"
    echo \"Web3 development environment loaded\"
    echo \"Available commands: forge, cast, anvil\"
  \"\";

  scripts.dev = \"forge build\";
  scripts.test = \"forge test\";
  scripts.deploy = \"forge script Deploy\";
}
EOF
            ;;
        *)
            cat > devenv.nix << EOF
{ pkgs, ... }:

{
  packages = [ pkgs.git ];

  enterShell = \"\"
    echo \"Development environment loaded\"
  \"\";

  scripts.hello = \"echo 'Hello from devenv!'\";
}
EOF
            ;;
    esac

    echo " Added devenv support for $project_type"
    echo "Run 'devenv up' to start the environment"
}

# Function to setup environment tools
setup_environment_tools() {
    local project_type="$1"
    local with_direnv="${2:-true}"
    local with_devenv="${3:-false}"

    if [[ "$with_direnv" == "true" ]]; then
        add_direnv_support "$project_type"
    fi

    if [[ "$with_devenv" == "true" ]]; then
        add_devenv_support "$project_type"
    fi
}
